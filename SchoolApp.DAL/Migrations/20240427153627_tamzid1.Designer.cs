// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolApp.DAL.SchoolContext;

#nullable disable

namespace SchoolApp.DAL.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20240427153627_tamzid1")]
    partial class tamzid1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.AcademicMonth", b =>
                {
                    b.Property<int>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonthId"));

                    b.Property<string>("MonthName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.HasKey("MonthId");

                    b.HasIndex("MonthlyPaymentId");

                    b.ToTable("AcademicMonth");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicYearId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYear");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<int>("AttendanceIdentificationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.DueBalance", b =>
                {
                    b.Property<int>("DueBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DueBalanceId"));

                    b.Property<decimal?>("DueBalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DueBalanceId");

                    b.HasIndex("MonthlyPaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("DueBalance");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSchedule", b =>
                {
                    b.Property<int>("ExamScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamScheduleId"));

                    b.Property<string>("ExamScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamScheduleId");

                    b.ToTable("ExamSchedule");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamScheduleStandard", b =>
                {
                    b.Property<int>("ExamScheduleStandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamScheduleStandardId"));

                    b.Property<int>("ExamScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("ExamScheduleStandardId");

                    b.HasIndex("ExamScheduleId");

                    b.HasIndex("StandardId");

                    b.ToTable("dbsExamScheduleStandard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSubject", b =>
                {
                    b.Property<int>("ExamSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSubjectId"));

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("ExamEndTime")
                        .HasColumnType("time");

                    b.Property<int?>("ExamScheduleStandardId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ExamStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ExamSubjectId");

                    b.HasIndex("ExamScheduleStandardId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ExamSubject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamType", b =>
                {
                    b.Property<int>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamTypeId"));

                    b.Property<string>("ExamTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamType");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("OthersPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("FeeId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("MonthlyPaymentId");

                    b.HasIndex("OthersPaymentId");

                    b.HasIndex("StandardId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeeType", b =>
                {
                    b.Property<int>("FeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeTypeId"));

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeeTypeId");

                    b.ToTable("FeeType");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Mark", b =>
                {
                    b.Property<int>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkId"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MarkEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ObtainedScore")
                        .HasColumnType("int");

                    b.Property<int>("PassMarks")
                        .HasColumnType("int");

                    b.Property<int>("PassStatus")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("MarkId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Mark");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.MonthlyPayment", b =>
                {
                    b.Property<int>("MonthlyPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonthlyPaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Waver")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MonthlyPaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("MonthlyPayment");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OtherPaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"));

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OthersPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("OthersPaymentId");

                    b.ToTable("OtherPaymentDetail");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OthersPayment", b =>
                {
                    b.Property<int>("OthersPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OthersPaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OthersPaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("OthersPayment");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"));

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("MonthlyPaymentId");

                    b.ToTable("PaymentDetail");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentMonth", b =>
                {
                    b.Property<int>("PaymentMonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMonthId"));

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentMonthId");

                    b.HasIndex("MonthlyPaymentId");

                    b.ToTable("PaymentMonth");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankAccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffSalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueStaffAttendanceNumber")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StaffSalaryId");

                    b.HasIndex("UniqueStaffAttendanceNumber")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffExperience", b =>
                {
                    b.Property<int>("StaffExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffExperienceId"));

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffExperienceId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffExperience");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffSalary", b =>
                {
                    b.Property<int>("StaffSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffSalaryId"));

                    b.Property<decimal?>("Allowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FestivalBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HousingAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MedicalAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SavingFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Taxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TransportationAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StaffSalaryId");

                    b.ToTable("StaffSalary");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Standard", b =>
                {
                    b.Property<int>("StandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StandardId"));

                    b.Property<string>("StandardCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StandardId");

                    b.ToTable("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentNo")
                        .HasColumnType("int");

                    b.Property<string>("FatherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherNID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalGuardianContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalGuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherNID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StandardId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StudentBloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentContactNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentContactNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StudentDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentGender")
                        .HasColumnType("int");

                    b.Property<string>("StudentNIDNumber")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentReligion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueStudentAttendanceNumber")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("AdmissionNo")
                        .IsUnique();

                    b.HasIndex("EnrollmentNo")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.HasIndex("UniqueStudentAttendanceNumber")
                        .IsUnique();

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectCode")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("StandardId");

                    b.HasIndex("SubjectCode")
                        .IsUnique()
                        .HasFilter("[SubjectCode] IS NOT NULL");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.AcademicMonth", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", "monthlyPayment")
                        .WithMany("academicMonths")
                        .HasForeignKey("MonthlyPaymentId");

                    b.Navigation("monthlyPayment");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.DueBalance", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", null)
                        .WithMany("dueBalances")
                        .HasForeignKey("MonthlyPaymentId");

                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamScheduleStandard", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.ExamSchedule", "ExamSchedule")
                        .WithMany("ExamScheduleStandards")
                        .HasForeignKey("ExamScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany("ExamScheduleStandards")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamSchedule");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSubject", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.ExamScheduleStandard", "ExamScheduleStandard")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("ExamScheduleStandardId");

                    b.HasOne("SchoolApp.Models.DataModels.ExamType", "ExamType")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Subject", "Subject")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamScheduleStandard");

                    b.Navigation("ExamType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Fee", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.FeeType", "feeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", "monthlyPayment")
                        .WithMany("fees")
                        .HasForeignKey("MonthlyPaymentId");

                    b.HasOne("SchoolApp.Models.DataModels.OthersPayment", "othersPayment")
                        .WithMany("fees")
                        .HasForeignKey("OthersPaymentId");

                    b.HasOne("SchoolApp.Models.DataModels.Standard", "standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("feeType");

                    b.Navigation("monthlyPayment");

                    b.Navigation("othersPayment");

                    b.Navigation("standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Mark", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.MonthlyPayment", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OtherPaymentDetail", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.OthersPayment", null)
                        .WithMany("otherPaymentDetails")
                        .HasForeignKey("OthersPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OthersPayment", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentDetail", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", null)
                        .WithMany("PaymentDetails")
                        .HasForeignKey("MonthlyPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentMonth", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", null)
                        .WithMany("paymentMonths")
                        .HasForeignKey("MonthlyPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SchoolApp.Models.DataModels.StaffSalary", "StaffSalary")
                        .WithMany()
                        .HasForeignKey("StaffSalaryId");

                    b.Navigation("Department");

                    b.Navigation("StaffSalary");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffExperience", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Staff", null)
                        .WithMany("StaffExperiences")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Student", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany("Subjects")
                        .HasForeignKey("StandardId");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSchedule", b =>
                {
                    b.Navigation("ExamScheduleStandards");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamScheduleStandard", b =>
                {
                    b.Navigation("ExamSubjects");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamType", b =>
                {
                    b.Navigation("ExamSubjects");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.MonthlyPayment", b =>
                {
                    b.Navigation("PaymentDetails");

                    b.Navigation("academicMonths");

                    b.Navigation("dueBalances");

                    b.Navigation("fees");

                    b.Navigation("paymentMonths");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OthersPayment", b =>
                {
                    b.Navigation("fees");

                    b.Navigation("otherPaymentDetails");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.Navigation("StaffExperiences");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Standard", b =>
                {
                    b.Navigation("ExamScheduleStandards");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.Navigation("ExamSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
